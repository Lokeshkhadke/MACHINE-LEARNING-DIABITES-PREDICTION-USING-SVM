# -*- coding: utf-8 -*-
"""Diabities Diesease prediction using SVM Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gXyCR6aQPrRLdOfKdMnhWATLfxkXEfQG

The project focuses on predicting whether a person has diabetes based on health-related data, using the PIMA Diabetes Dataset. The machine learning algorithm Support Vector Machine (SVM) is used to classify individuals as diabetic or non-diabetic. This project demonstrates how machine learning can help in healthcare by providing an early indication of potential health issues.

**IMPORTING THE LIBRARIES**
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""This project builds a predictive system using machine learning to classify individuals as diabetic or not based on specific health parameters, such as blood glucose levels, BMI, and age. The model is trained using SVM, a powerful algorithm for classification problems.

**Data Collection and Analysis**
"""

# loading the diabetes dataset to a pandas DataFrame
dataset = pd.read_csv('/content/diabetes.csv')

#PRINTING FIRST FIVE ROWS
diabetes_dataset.head()

#TO FIND NUMBER OF ROWS AND COLUMNS
dataset.shape

#TO GET STATISTICAL MEASURE OF DATA STRUCTURE.
dataset.describe()

dataset.info()

#COUNTING 0 AND 1 NON-DIABETIC AND DIABATIC VALUES RESPECTIVELY.
dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

#SPLITTING X AND Y(TARGET)
X = dataset.drop(columns = 'Outcome', axis=1)
Y = dataset['Outcome']

print(X)

print(Y)

"""**STANDARDIZING THE DATA**

Standardization ensures that all feature values are scaled to the same range
"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = dataset['Outcome']

print(Y)

"""**TRAIN TEST SPLIT**"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.3, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""**Importance of Preprocessing:** Steps like standardization and splitting data correctly improve model performance.

**TRAINING THE SVM CLASSIFIER MODEL**

SVM is effective for binary classification tasks like this.
"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

"""**MODEL EVALUATION**"""

#ACCURACY SCORE FOR THE TRAINING DATA
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

##ACCURACY SCORE FOR THE TESTING DATA
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

"""**Accuracy on training data**: How well the model performs on data it has seen.


**Accuracy on test data**: How well the model generalizes to unseen data.
"""

print('Accuracy score of the test data : ', test_data_accuracy)

"""**MAKE A PREDICTIVE SYSTEM**"""

input_data = (5,166,72,19,175,25.8,0.587,51)

#CHANGEINPUT DATA INTO NUMPY ARRAY
input_data_as_numpy_array = np.asarray(input_data)

#RESHAPING THE ARRAY WE ARE SPLIITTING FOR A INSTANCE
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#STANDARDIZE INPUT DATA
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

"""**CONCLUSION:**

This project uses machine learning to predict diabetes based on patient data. The model achieved reasonable accuracy on both training and test data, and can differentiate between diabetic and non-diabetic individuals.

**Real-world Applicability:** This model can assist in early diabetes detection but should not replace professional medical diagnosis.The dataset typically contains 768 rows and 9 columns, which is sufficient for basic models like Logistic Regression or SVM in an educational or exploratory context.If the dataset is small:1)Use cross-validation to make the most of the available data.
2)Focus on simpler models (e.g., Logistic Regression) that require less data to perform well.


**Limitations:**

Predicting diabetes is a critical task; even small errors can have serious consequences.


also More advanced techniques, such as **hyperparameter tuning or ensemble models, could improve performance**.

This project showcases the potential of machine learning in healthcare, but accuracy and reliability are essential when dealing with life-threatening conditions.so Always combine machine predictions with expert medical opinions.
"""